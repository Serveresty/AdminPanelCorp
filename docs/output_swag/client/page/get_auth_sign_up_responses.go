// Code generated by go-swagger; DO NOT EDIT.

package page

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetAuthSignUpReader is a Reader for the GetAuthSignUp structure.
type GetAuthSignUpReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAuthSignUpReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAuthSignUpOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAuthSignUpBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAuthSignUpForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAuthSignUpInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /auth/sign-up] GetAuthSignUp", response, response.Code())
	}
}

// NewGetAuthSignUpOK creates a GetAuthSignUpOK with default headers values
func NewGetAuthSignUpOK() *GetAuthSignUpOK {
	return &GetAuthSignUpOK{}
}

/*
GetAuthSignUpOK describes a response with status code 200, with default header values.

OK
*/
type GetAuthSignUpOK struct {

	/* Authorization
	 */
	Authorization string

	Payload string
}

// IsSuccess returns true when this get auth sign up o k response has a 2xx status code
func (o *GetAuthSignUpOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get auth sign up o k response has a 3xx status code
func (o *GetAuthSignUpOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get auth sign up o k response has a 4xx status code
func (o *GetAuthSignUpOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get auth sign up o k response has a 5xx status code
func (o *GetAuthSignUpOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get auth sign up o k response a status code equal to that given
func (o *GetAuthSignUpOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get auth sign up o k response
func (o *GetAuthSignUpOK) Code() int {
	return 200
}

func (o *GetAuthSignUpOK) Error() string {
	return fmt.Sprintf("[GET /auth/sign-up][%d] getAuthSignUpOK  %+v", 200, o.Payload)
}

func (o *GetAuthSignUpOK) String() string {
	return fmt.Sprintf("[GET /auth/sign-up][%d] getAuthSignUpOK  %+v", 200, o.Payload)
}

func (o *GetAuthSignUpOK) GetPayload() string {
	return o.Payload
}

func (o *GetAuthSignUpOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Authorization
	hdrAuthorization := response.GetHeader("Authorization")

	if hdrAuthorization != "" {
		o.Authorization = hdrAuthorization
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthSignUpBadRequest creates a GetAuthSignUpBadRequest with default headers values
func NewGetAuthSignUpBadRequest() *GetAuthSignUpBadRequest {
	return &GetAuthSignUpBadRequest{}
}

/*
GetAuthSignUpBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAuthSignUpBadRequest struct {

	/* Authorization
	 */
	Authorization string

	Payload string
}

// IsSuccess returns true when this get auth sign up bad request response has a 2xx status code
func (o *GetAuthSignUpBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get auth sign up bad request response has a 3xx status code
func (o *GetAuthSignUpBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get auth sign up bad request response has a 4xx status code
func (o *GetAuthSignUpBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get auth sign up bad request response has a 5xx status code
func (o *GetAuthSignUpBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get auth sign up bad request response a status code equal to that given
func (o *GetAuthSignUpBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get auth sign up bad request response
func (o *GetAuthSignUpBadRequest) Code() int {
	return 400
}

func (o *GetAuthSignUpBadRequest) Error() string {
	return fmt.Sprintf("[GET /auth/sign-up][%d] getAuthSignUpBadRequest  %+v", 400, o.Payload)
}

func (o *GetAuthSignUpBadRequest) String() string {
	return fmt.Sprintf("[GET /auth/sign-up][%d] getAuthSignUpBadRequest  %+v", 400, o.Payload)
}

func (o *GetAuthSignUpBadRequest) GetPayload() string {
	return o.Payload
}

func (o *GetAuthSignUpBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Authorization
	hdrAuthorization := response.GetHeader("Authorization")

	if hdrAuthorization != "" {
		o.Authorization = hdrAuthorization
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthSignUpForbidden creates a GetAuthSignUpForbidden with default headers values
func NewGetAuthSignUpForbidden() *GetAuthSignUpForbidden {
	return &GetAuthSignUpForbidden{}
}

/*
GetAuthSignUpForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAuthSignUpForbidden struct {

	/* Authorization
	 */
	Authorization string

	Payload string
}

// IsSuccess returns true when this get auth sign up forbidden response has a 2xx status code
func (o *GetAuthSignUpForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get auth sign up forbidden response has a 3xx status code
func (o *GetAuthSignUpForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get auth sign up forbidden response has a 4xx status code
func (o *GetAuthSignUpForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get auth sign up forbidden response has a 5xx status code
func (o *GetAuthSignUpForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get auth sign up forbidden response a status code equal to that given
func (o *GetAuthSignUpForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get auth sign up forbidden response
func (o *GetAuthSignUpForbidden) Code() int {
	return 403
}

func (o *GetAuthSignUpForbidden) Error() string {
	return fmt.Sprintf("[GET /auth/sign-up][%d] getAuthSignUpForbidden  %+v", 403, o.Payload)
}

func (o *GetAuthSignUpForbidden) String() string {
	return fmt.Sprintf("[GET /auth/sign-up][%d] getAuthSignUpForbidden  %+v", 403, o.Payload)
}

func (o *GetAuthSignUpForbidden) GetPayload() string {
	return o.Payload
}

func (o *GetAuthSignUpForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Authorization
	hdrAuthorization := response.GetHeader("Authorization")

	if hdrAuthorization != "" {
		o.Authorization = hdrAuthorization
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthSignUpInternalServerError creates a GetAuthSignUpInternalServerError with default headers values
func NewGetAuthSignUpInternalServerError() *GetAuthSignUpInternalServerError {
	return &GetAuthSignUpInternalServerError{}
}

/*
GetAuthSignUpInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAuthSignUpInternalServerError struct {

	/* Authorization
	 */
	Authorization string

	Payload string
}

// IsSuccess returns true when this get auth sign up internal server error response has a 2xx status code
func (o *GetAuthSignUpInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get auth sign up internal server error response has a 3xx status code
func (o *GetAuthSignUpInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get auth sign up internal server error response has a 4xx status code
func (o *GetAuthSignUpInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get auth sign up internal server error response has a 5xx status code
func (o *GetAuthSignUpInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get auth sign up internal server error response a status code equal to that given
func (o *GetAuthSignUpInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get auth sign up internal server error response
func (o *GetAuthSignUpInternalServerError) Code() int {
	return 500
}

func (o *GetAuthSignUpInternalServerError) Error() string {
	return fmt.Sprintf("[GET /auth/sign-up][%d] getAuthSignUpInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAuthSignUpInternalServerError) String() string {
	return fmt.Sprintf("[GET /auth/sign-up][%d] getAuthSignUpInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAuthSignUpInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *GetAuthSignUpInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Authorization
	hdrAuthorization := response.GetHeader("Authorization")

	if hdrAuthorization != "" {
		o.Authorization = hdrAuthorization
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
