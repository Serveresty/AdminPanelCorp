// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new auth API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for auth API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAuthSignIn(params *GetAuthSignInParams, opts ...ClientOption) (*GetAuthSignInOK, error)

	GetAuthSignUp(params *GetAuthSignUpParams, opts ...ClientOption) (*GetAuthSignUpOK, error)

	PostAuthLoginForm(params *PostAuthLoginFormParams, opts ...ClientOption) (*PostAuthLoginFormOK, error)

	PostAuthLogoutForm(params *PostAuthLogoutFormParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAuthLogoutFormOK, error)

	PostAuthRegistrationForm(params *PostAuthRegistrationFormParams, opts ...ClientOption) (*PostAuthRegistrationFormOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetAuthSignIn pings auth

SignIn page
*/
func (a *Client) GetAuthSignIn(params *GetAuthSignInParams, opts ...ClientOption) (*GetAuthSignInOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthSignInParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAuthSignIn",
		Method:             "GET",
		PathPattern:        "/auth/sign-in",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAuthSignInReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuthSignInOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAuthSignIn: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAuthSignUp pings auth

SignUp page
*/
func (a *Client) GetAuthSignUp(params *GetAuthSignUpParams, opts ...ClientOption) (*GetAuthSignUpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthSignUpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAuthSignUp",
		Method:             "GET",
		PathPattern:        "/auth/sign-up",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAuthSignUpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuthSignUpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAuthSignUp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAuthLoginForm signs in

login
*/
func (a *Client) PostAuthLoginForm(params *PostAuthLoginFormParams, opts ...ClientOption) (*PostAuthLoginFormOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAuthLoginFormParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAuthLoginForm",
		Method:             "POST",
		PathPattern:        "/auth/login-form",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAuthLoginFormReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAuthLoginFormOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAuthLoginForm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAuthLogoutForm logouts

logout
*/
func (a *Client) PostAuthLogoutForm(params *PostAuthLogoutFormParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAuthLogoutFormOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAuthLogoutFormParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAuthLogoutForm",
		Method:             "POST",
		PathPattern:        "/auth/logout-form",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAuthLogoutFormReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAuthLogoutFormOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAuthLogoutForm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAuthRegistrationForm signs up

create account
*/
func (a *Client) PostAuthRegistrationForm(params *PostAuthRegistrationFormParams, opts ...ClientOption) (*PostAuthRegistrationFormOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAuthRegistrationFormParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAuthRegistrationForm",
		Method:             "POST",
		PathPattern:        "/auth/registration-form",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAuthRegistrationFormReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAuthRegistrationFormOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAuthRegistrationForm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
